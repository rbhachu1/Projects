#!/usr/bin/env python3

'''
Program: assignment2.py 
Author: "Rajbeer Singh Bhachu"
The python code in this file is original work written by
"Student Name". No code in this file is copied from any other source 
except those provided by the course instructor, including any person, 
textbook, or on-line resource. I have not shared this python script 
with anyone or anything except for submission for grading.  
I understand that the Academic Honesty Policy will be enforced and 
violators will be reported and appropriate action will be taken.

Description: <Assignment2 -Final Script>

Date:  11 December
'''

import argparse
import os, sys

def parse_command_args() -> object:
    "Set up argparse here. Call this function inside main."
    parser = argparse.ArgumentParser(description="Memory Visualiser -- See Memory Usage Report with bar charts", epilog="Copyright 2023")
    parser.add_argument("-l", "--length", type=int, default=20, help="Specify the length of the graph. Default is 20.")
    parser.add_argument("-H", "--human-readable", action="store_true", help="Print file sizes in human-readable format.")
    parser.add_argument("program", type=str, nargs='?', help="If a program is specified, show memory use of all associated processes. Show only total use if not.")
    args = parser.parse_args()
    return args

def percent_to_graph(percent: float, length: int = 20) -> str:
    "Turns a percent 0.0 - 1.0 into a bar graph"
    hashes = int(percent * length)
    spaces = length - hashes
    return '#' * hashes + ' ' * spaces

def get_sys_mem() -> int:
    "Return total system memory (used or available) in kB"
    with open('/proc/meminfo', 'r') as f:
        for line in f:
            if line.startswith('MemTotal'):
                mem_total = int(line.split()[1])
                return mem_total

def get_avail_mem() -> int:
    "Return total memory that is currently in use"
    with open('/proc/meminfo', 'r') as f:
        for line in f:
            if line.startswith('MemAvailable'):
                mem_available = int(line.split()[1])
                return mem_available

def pids_of_prog(app_name: str) -> list:
    "Given an app name, return all PIDs associated with the app"
    output = os.popen(f'pidof {app_name}').read().strip()
    pid_list = output.split(' ')
    return pid_list
    
def rss_mem_of_pid(proc_id: str) -> int:
    "Given a process ID, return the resident memory used, zero if not found"
    rss = 0
    try:
        with open(f'/proc/{proc_id}/smaps', 'r') as data:
            for line in data:
                if line.startswith('Rss:'):
                    rss += int(line.split()[1])  # Extract RSS value from line and add to total
    except FileNotFoundError:
        raise ValueError(f'Process ID {proc_id} not found.')
    return rss
 
def bytes_to_human_r(kibibytes: int, decimal_places: int=2) -> str:
    "turn 1,024 into 1 MiB, for example"
    suffixes = ['KiB', 'MiB', 'GiB', 'TiB', 'PiB']  # iB indicates 1024
    suf_count = 0
    result = kibibytes 
    while result > 1024 and suf_count < len(suffixes):
        result /= 1024
        suf_count += 1
    str_result = f'{result:.{decimal_places}f} '
    str_result += suffixes[suf_count]
    return str_result

if __name__ == "__main__":
    args = parse_command_args()
    process = args.program
    length = args.length
    mem_total = get_sys_mem()
    mem_available = get_avail_mem()
    mem_used = (mem_total - mem_available)
    percentage = (mem_used / mem_total)
    graph = percent_to_graph(percentage, length)
    pids = pids_of_prog(process)
    if not args.program:
        print(f"Memory Usage:{process}\t{graph} {int(percentage * 100)}% {mem_used}/{mem_total} kB")
    # process args
    # if no parameter passed, 
    # open meminfo.
    # get used memory
    # get total memory
    # call percent to graph
    # print
    else:
        total_mem_used = 0
        for pid in pids:
            total_mem_used += rss_mem_of_pid(pid)
            print(rss_mem_of_pid(pid))
        percentage = total_mem_used / mem_used
        graph = percent_to_graph(percentage, length)
        print(f"Memory Usage:{process}\t{graph} {int(percentage * 100)}% {mem_used}/{mem_total} kB")
    # if a parameter passed:
    # get pids from pidof
    # lookup each process id in /proc
    # read memory used
    # add to total used
    # percent to graph
    # take total our of total system memory? or total used memory? total used memory.
    # percent to graph.
